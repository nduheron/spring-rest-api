input {
    beats {
        port => 5044
	}
}

filter {

    ############################# NGINX ##############################
    if [event][module] == "nginx" {

        ########## access.log ##########
        if [fileset][name] == "access" {
            grok {
                 match => { "message" => "%{IPORHOST:[nginx][access][remote_ip]} - (-|%{DATA:[user][name]}) \[%{HTTPDATE:[nginx][access][time]}\] \"%{DATA:[nginx][access][info]}\" %{NUMBER:[http][response][status_code]} %{NUMBER:[http][response][body][bytes]} \"(-|%{DATA:[http][request][referrer]})\" \"(-|%{DATA:[nginx][access][agent]})\"" }
                 remove_field => 'message'
            }
            if [nginx][access][info] {
                grok {
                     match => { "[nginx][access][info]" => "%{WORD:[http][request][method]} %{DATA:[http][request][url]} HTTP/%{NUMBER:[http][version]}" }
                }
                mutate {
                    copy => { "[http][request][url]" => "[url][original]" }
                }
            }
            useragent {
                source => "[nginx][access][agent]"
                target => "user_agent"
                remove_field => "[nginx][access][agent]"
            }
            geoip {
                source => "[nginx][access][remote_ip]"
                target => "[nginx][access][geoip]"
            }
            mutate {
                convert => {
                  "[http][response][status_code]" => "integer"
                  "[http][response][body][bytes]" => "integer"
                }
            }
        }

        ########## error.log ##########
        if [fileset][name] == "error" {
            grok {
                 match => { "[event][original]" => "%{DATA:[nginx][error][time]} \[%{DATA:[log][level]}\] %{NUMBER:[process][pid]}#%{NUMBER:[process][thread][id]}: (\*%{NUMBER:[nginx][error][connection_id]} )?%{GREEDYDATA:[nginx][error][message]}" }
            }
            mutate {
                copy => { "[nginx][error][message]" => "message" }
                uppercase => [ "[log][level]" ]
                convert => {
                  "[process][pid]" => "integer"
                  "[process][thread][id]" => "integer"
                  "[nginx][error][connection_id]" => "integer"
               }
            }
        }
    }

    ############################# API ##############################
    if [event][module] == "api" {
        mutate {
            rename  => { "[http][response][statusCode]" => "[http][response][status_code]" }
            rename  => { "[http][response][statusFamily]" => "[http][response][status_family]" }
            copy => { "[http][request][url]" => "[url][original]" }
        }
    }
}

output {

  if "nginx" in [event][module] {
      elasticsearch {
        hosts    => [ 'elasticsearch' ]
        user => "elastic"
        password => "${ELASTIC_PASSWORD}"
        index => "%{[@metadata][beat]}-%{[@metadata][version]}-nginx-%{+YYYY.MM}"
        action => "create"
      }
  } else if "api" in [event][module] {
      elasticsearch {
        hosts    => [ 'elasticsearch' ]
        user => "elastic"
        password => "${ELASTIC_PASSWORD}"
        index => "%{[@metadata][beat]}-%{[@metadata][version]}-logs-api-%{+YYYY.MM}"
        action => "create"
      }
  }
  # stdout { codec => rubydebug }
}